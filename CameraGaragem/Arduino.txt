#include <Stepper.h>

int stepsPerRevolution = 64;

#define fimdeCurso1 6
#define pinoLedVermelho 7



// inicializa a biblioteca criando uma instancia do motor
Stepper myStepper(stepsPerRevolution, 2, 4, 3, 5);


bool Retecao1();



void setup() {
  pinMode(fimdeCurso1, INPUT);  
  pinMode(pinoLedVermelho, OUTPUT);
  
  
}


void loop() {

  stepsPerRevolution = 50;

  if (Retecao1()) {
    digitalWrite(pinoLedVermelho, HIGH);
    
    
  } else {
    digitalWrite(pinoLedVermelho, LOW);
    
  }


  


  if (digitalRead(pinoLedVermelho) == HIGH) {
    myStepper.setSpeed(50);  // ajusta a velocidade inicial para 2 passos
    myStepper.step(-stepsPerRevolution);
  }else {
    digitalWrite(pinoLedVermelho, LOW);
    myStepper.setSpeed(50);  // ajusta a velocidade inicial para 2 passos
    myStepper.step(stepsPerRevolution);
  }

  
}





bool Retecao1() {
#define tempoDebounce 50  //(tempo para eliminar o efeito Bounce EM MILISEGUNDOS)

  bool estadoBotao;
  static bool estadoBotaoAnt;
  static bool estadoRet = true;
  static unsigned long delayBotao = 0;

  if ((millis() - delayBotao) > tempoDebounce) {
    estadoBotao = digitalRead(fimdeCurso1);
    if (estadoBotao && (estadoBotao != estadoBotaoAnt)) {
      estadoRet = !estadoRet;
      delayBotao = millis();
    }
    estadoBotaoAnt = estadoBotao;
  }

  return estadoRet;
}
